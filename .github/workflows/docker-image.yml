name: Deploy Docker to Windows Server EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy Docker App on EC2 (Windows Server)
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Save Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_IMAGE_NAME }}:latest .
          docker save -o app.tar ${{ secrets.DOCKER_IMAGE_NAME }}:latest
        shell: pwsh

      - name: Check if app.tar exists
        run: |
          if (!(Test-Path -Path "app.tar")) {
            Write-Error "‚ùå ERROR: El archivo app.tar no existe."
            exit 1
          } else {
            Write-Host "‚úÖ Archivo app.tar encontrado."
          }
        shell: pwsh

      - name: Transfer Docker image to EC2 (Windows Server)
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.WINDOWS_HOST_DNS }}
          username: ${{ secrets.WINDOWS_USERNAME }}
          password: ${{ secrets.WINDOWS_PASSWORD }}
          source: "app.tar"
          target: "C:\\Users\\${{ secrets.WINDOWS_USERNAME }}\\Documents\\"
          strip_components: 0

      - name: Deploy Docker Container on Windows Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.WINDOWS_HOST_DNS }}
          username: ${{ secrets.WINDOWS_USERNAME }}
          password: ${{ secrets.WINDOWS_PASSWORD }}
          shell: powershell
          script: |
            Write-Host "üìå Verificando e instalando Docker en Windows Server..."
            
            # Instalar Docker en Windows Server si no est√° instalado
            if (!(Get-Command docker -ErrorAction SilentlyContinue)) {
              Write-Host "üìå Instalando Docker..."
              Invoke-WebRequest -Uri "https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe" -OutFile "C:\DockerInstaller.exe"
              Start-Process -FilePath "C:\DockerInstaller.exe" -ArgumentList "/quiet /install" -NoNewWindow -Wait
              Write-Host "‚úÖ Docker instalado correctamente."
            } else {
              Write-Host "‚úÖ Docker ya est√° instalado."
            }
            
            Write-Host "üìå Cargando la imagen Docker..."
            docker load -i "C:\Users\${{ secrets.WINDOWS_USERNAME }}\Documents\app.tar"
            
            Write-Host "üìå Verificando si el contenedor ya existe..."
            $containerExists = docker ps -a --format "{{.Names}}" | Select-String -Pattern "^${{ secrets.DOCKER_IMAGE_NAME }}$"

            if ($containerExists) {
              Write-Host "üìå Deteniendo y eliminando el contenedor existente..."
              docker stop ${{ secrets.DOCKER_IMAGE_NAME }} || Write-Host "‚ö†Ô∏è No se pudo detener el contenedor."
              docker rm ${{ secrets.DOCKER_IMAGE_NAME }} || Write-Host "‚ö†Ô∏è No se pudo eliminar el contenedor."
            }

            Write-Host "üìå Iniciando el nuevo contenedor..."
            docker run -d `
              --name ${{ secrets.DOCKER_IMAGE_NAME }} `
              -p 80:6379 `
              -e SPRING_DATA_REDIS_HOST=${{ secrets.SPRING_DATA_REDIS_HOST }} `
              -e SPRING_DATA_REDIS_PORT=${{ secrets.SPRING_DATA_REDIS_PORT }} `
              ${{ secrets.DOCKER_IMAGE_NAME }}:latest

            Write-Host "‚úÖ Despliegue completado en Windows Server üöÄ"
